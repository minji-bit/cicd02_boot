# GitHub Actions 워크플로우 이름
name: Docker 컨테이너로 EC2에 배포하기

# main 브랜치에 push가 발생하면 이 워크플로우 실행
on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest  # GitHub 제공 Ubuntu 환경에서 실행

    steps:
      # 1. GitHub 저장소 코드 가져오기
      - name: Checkout source
        uses: actions/checkout@v4

      # 2. Spring Boot 설정 파일(application.properties)을 생성
      # GitHub Secrets에 저장된 문자열을 파일로 생성
      - name: Create application.properties
        run: echo "${{ secrets.APPLICATION_PROPERTIES }}" > ./src/main/resources/application.properties

      # 3. docker-compose.yml 파일 생성
      # GitHub Secrets에 저장된 내용 기반으로 로컬에 생성
      - name: Create docker-compose.yml 생성
        run: echo "${{ secrets.DOCKER_COMPOSE  }}" > ./docker-compose.yml

      # 4. gradlew에 실행 권한 부여 (리눅스에서 실행되도록)
      - name: Gradlew 실행 권한 부여
        run: chmod +x ./gradlew

      # 5. 프로젝트를 빌드 (클린 후 재빌드)
      - name: Gradle 빌드 실행
        run: ./gradlew clean build

      # 6. Docker Hub에 로그인 (푸시하기 위해 인증)
      - name: Docker Hub 로그인
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 7. 빌드된 JAR 파일을 포함한 Docker 이미지 생성
      - name: Docker 이미지 빌드
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/myapp:latest .

      # 8. Docker Hub에 이미지 푸시 (EC2에서 사용하기 위해)
      - name: Docker 이미지 푸시
        run: docker push ${{ secrets.DOCKER_USERNAME }}/myapp:latest

      # 9. docker-compose.yml 파일을 EC2 서버로 복사
      - name: docker-compose.yml 전송
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}         # EC2 IP
          username: ${{ secrets.EC2_USERNAME }} # EC2 사용자명 (보통 ubuntu)
          key: ${{ secrets.EC2_PRIVATE_KEY }}   # EC2 접근용 개인키
          source: "docker-compose.yml"          # 로컬에서 보낼 파일
          target: "~/cicd-docker/"              # EC2 내 저장 위치

      # 10. EC2에 접속하여 docker-compose 명령 실행
      - name: EC2에서 컨테이너 실행
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script_stop: true
          script: |
            mkdir -p ~/cicd-docker  # 배포 디렉토리 생성 (이미 있으면 무시)
            
            cd ~/cicd-docker
            docker-compose down || true  # 기존 컨테이너 중지 (실패해도 계속)
            docker-compose pull          # 최신 이미지 가져오기
            docker-compose up -d         # 백그라운드에서 컨테이너 실행
